#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: AX6000_ImmortalWrt_mt798x-6.6

on:
  repository_dispatch:
  workflow_dispatch:
  # schedule:
  #   - cron: 0 8 * * 5

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  BRANCH_NAME: ImmortalWrt
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: mt798x-6.6.config
  DIY_P1_SH: diy-part3.sh
  DIY_P2_SH: diy-part4.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        repository: Mo-chong/redmi-ax6000

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
        libssl-dev libtool llvm lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
        python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
        uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo apt install -y libpam0g-dev libsensors4-dev libcap-dev libjson-c-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code # 克隆源码步骤已修改
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        cd openwrt
        # --- 使用指定的旧 Commit ---
        git checkout 16b5fc26061aca97d56e4d4381795f95a2521c9c
        # ---------------------------
        cd ..
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load Cache # 缓存步骤
      uses: actions/cache@v4
      env:
        cache-name: Linux-openwrt-cache
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/staging_dir
        key: Linux-openwrt-6.6-${{ hashFiles('**/mt798x-6.6.config', '**/feeds.conf.default') }}
        restore-keys: |
          Linux-openwrt-6.6-

    - name: Update feeds # 更新 Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a 

    - name: Install feeds # 安装 Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load custom configuration # 加载自定义配置和脚本
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH    

    - name: Load custom configuration # 再次确认安装 feeds (有时 DIY 脚本会添加新的)
      run: |
        cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration # 加载自定义配置和脚本 Part 2
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package # 下载依赖包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware # 编译固件 (确认使用多线程)
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j8 || make -j8 V=s # <--- 这里是多线程编译命令
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Organize files # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory # 上传固件目录 Artifact
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag # 生成 Release 标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        # 保持你原来的文件名格式
        touch cmcc-rax3000m-PASSWALL-adguard-smartDNS.txt 
        # 可选：如果需要添加 GoFile 链接 (但你需要确保 UPLOAD_GOFILE=true 且相关上传步骤存在)
        # [ ${UPLOAD_GOFILE} = true ] && echo "🔗 [GoFile](...)" >> release.txt 
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release # 上传固件到 Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: cmcc-rax3000m-PASSWALL-adguard-smartDNS.txt # 使用你生成的文件名
        files: ${{ env.FIRMWARE }}/*
        overwrite_files: true # 允许覆盖同名文件

    - name: Delete workflow runs # 删除旧的 Workflow Runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old releases # 删除旧的 Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 12 # 保留最新的 12 个 Release
        delete_tags: true # 同时删除 Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
